import schedule from "node-schedule";
import { checkPaymentStatusByPaymentId } from "../services/checkPaymentByPaymentId";
import { logger } from "./logger";
import db from "../database";
import { appendSuccessfulPaymentToSheet } from "./writePaymentToSheet";

export interface PendingPayment {
    productId: string;
    paymentId: string;
    productTitle: string;
    productDescription: string;
    amount: string;
    currency: string;
    status: string;
    createdAt: Date;
    date: {
        parent_name: string;
        email: string;
        phone: string;
        child_name: string;
        birth_date: string;
        snils: string;
    };
}

class PendingPaymentsManager {
    private pendingPayments: Map<string, PendingPayment>;

    constructor() {
        this.pendingPayments = new Map();
        this.loadPaymentsFromDB();
        this.startScheduler();
    }

    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–ª–∞—Ç–µ–∂–∏ –∏–∑ SQLite –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞
     */
    private loadPaymentsFromDB(): void {
        const rows = db.prepare("SELECT * FROM pending_payments").all();
        rows.forEach((row: any) => {
            const payment: PendingPayment = {
                productId: row.productId,
                paymentId: row.paymentId,
                productTitle: row.productTitle,
                productDescription: row.productDescription,
                amount: row.amount,
                currency: row.currency,
                status: row.status,
                createdAt: new Date(row.createdAt),
                date: row.date ? JSON.parse(row.date) : {}, // –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º JSON
            };
            this.pendingPayments.set(row.paymentId, payment);
        });
        logger.info(`üîÑ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${rows.length} –ø–ª–∞—Ç–µ–∂–µ–π –∏–∑ –ë–î.`);
    }

    /**
     * –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π –∫–∞–∂–¥—ã–µ 1 –º–∏–Ω—É—Ç—É
     */
    private startScheduler(): void {
        schedule.scheduleJob("*/1 * * * *", async () => {
            logger.info("üîÑ –ù–∞—á–∞–ª–∞—Å—å –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π...");

            const payments = this.getPendingPayments();
            if (payments.length === 0) {
                logger.info("‚úÖ –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É.");
                return;
            }

            logger.info(`üîç –ù–∞–π–¥–µ–Ω–æ ${payments.length} –ø–ª–∞—Ç–µ–∂–µ–π –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.`);

            // –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
            for (const payment of payments) {
                try {
                    const statusData = await checkPaymentStatusByPaymentId(
                        payment.paymentId
                    );

                    if (statusData === "succeeded") {
                        logger.info(
                            `üí∞ –ü–ª–∞—Ç—ë–∂ ${payment.paymentId} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω. –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ Google Sheets...`
                        );
                        await appendSuccessfulPaymentToSheet(payment);
                        this.removePayment(payment.paymentId);
                        logger.info(
                            `‚úÖ –ü–ª–∞—Ç—ë–∂ ${payment.paymentId} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω –∏ —É–¥–∞–ª—ë–Ω.`
                        );
                    } else if (statusData === "canceled") {
                        logger.info(`‚ùå –ü–ª–∞—Ç—ë–∂ ${payment.paymentId} –æ—Ç–º–µ–Ω—ë–Ω.`);
                        this.removePayment(payment.paymentId);
                    } else if (statusData === "pending") {
                        logger.info(
                            `‚è≥ –ü–ª–∞—Ç—ë–∂ ${payment.paymentId} –≤—Å—ë –µ—â—ë –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ.`
                        );
                    } else {
                        logger.error(
                            `‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ ${payment.paymentId}: ${statusData}`
                        );
                    }
                } catch (err) {
                    logger.error(
                        `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞ ${payment.paymentId}: ${err}`
                    );
                }

                // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º (1 —Å–µ–∫—É–Ω–¥–∞)
                await new Promise((resolve) => setTimeout(resolve, 1000));
            }

            logger.info("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞.");
        });

        logger.info(
            "‚è≥ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π –∑–∞–ø—É—â–µ–Ω (–∏–Ω—Ç–µ—Ä–≤–∞–ª: 1 –º–∏–Ω)."
        );
    }

    /**
     * –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ –≤ —Å–ø–∏—Å–æ–∫ –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –ë–î
     */
    addPayment(payment: PendingPayment): void {
        this.pendingPayments.set(payment.paymentId, payment);
        db.prepare(
            `
            INSERT INTO pending_payments 
                (productId, paymentId, productTitle, productDescription, amount, currency, status, createdAt, date) 
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
            `
        ).run(
            payment.productId,
            payment.paymentId,
            payment.productTitle,
            payment.productDescription,
            payment.amount,
            payment.currency,
            payment.status,
            payment.createdAt.toISOString(),
            JSON.stringify(payment.date) // –°–æ—Ö—Ä–∞–Ω—è–µ–º date –∫–∞–∫ JSON
        );
        logger.info(
            `‚úÖ –ü–ª–∞—Ç—ë–∂ ${payment.paymentId} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –ë–î.`
        );
    }

    /**
     * –£–¥–∞–ª—è–µ—Ç –ø–ª–∞—Ç–µ–∂ –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –∏ –∏–∑ –ë–î
     */
    removePayment(paymentId: string): void {
        if (this.pendingPayments.has(paymentId)) {
            this.pendingPayments.delete(paymentId);
            db.prepare("DELETE FROM pending_payments WHERE paymentId = ?").run(
                paymentId
            );
            logger.info(`‚úÖ –ü–ª–∞—Ç—ë–∂ ${paymentId} —É–¥–∞–ª—ë–Ω –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –∏ –ë–î.`);
        } else {
            logger.warn(`‚ö†Ô∏è –ü–ª–∞—Ç—ë–∂ ${paymentId} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏
     */
    getPendingPayments(): PendingPayment[] {
        return Array.from(this.pendingPayments.values());
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –µ–¥–∏–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
export const pendingPaymentsManager = new PendingPaymentsManager();
