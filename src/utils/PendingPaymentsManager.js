"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.pendingPaymentsManager = void 0;
const node_schedule_1 = __importDefault(require("node-schedule"));
const checkPaymentByPaymentId_1 = require("../services/checkPaymentByPaymentId");
const logger_1 = require("./logger");
const database_1 = __importDefault(require("../database"));
const writePaymentToSheet_1 = require("./writePaymentToSheet");
class PendingPaymentsManager {
    constructor() {
        this.pendingPayments = new Map();
        this.loadPaymentsFromDB();
        this.startScheduler();
    }
    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–ª–∞—Ç–µ–∂–∏ –∏–∑ SQLite –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞
     */
    loadPaymentsFromDB() {
        const rows = database_1.default.prepare("SELECT * FROM pending_payments").all();
        rows.forEach((row) => {
            const payment = {
                productId: row.productId,
                paymentId: row.paymentId,
                productTitle: row.productTitle,
                productDescription: row.productDescription,
                amount: row.amount,
                currency: row.currency,
                status: row.status,
                createdAt: new Date(row.createdAt),
                date: row.date ? JSON.parse(row.date) : {}, // –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º JSON
            };
            this.pendingPayments.set(row.paymentId, payment);
        });
        logger_1.logger.info(`üîÑ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${rows.length} –ø–ª–∞—Ç–µ–∂–µ–π –∏–∑ –ë–î.`);
    }
    /**
     * –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π –∫–∞–∂–¥—ã–µ 1 –º–∏–Ω—É—Ç—É
     */
    startScheduler() {
        node_schedule_1.default.scheduleJob("*/1 * * * *", () => __awaiter(this, void 0, void 0, function* () {
            logger_1.logger.info("üîÑ –ù–∞—á–∞–ª–∞—Å—å –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π...");
            const payments = this.getPendingPayments();
            if (payments.length === 0) {
                logger_1.logger.info("‚úÖ –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É.");
                return;
            }
            logger_1.logger.info(`üîç –ù–∞–π–¥–µ–Ω–æ ${payments.length} –ø–ª–∞—Ç–µ–∂–µ–π –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.`);
            // –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
            for (const payment of payments) {
                try {
                    const statusData = yield (0, checkPaymentByPaymentId_1.checkPaymentStatusByPaymentId)(payment.paymentId);
                    if (statusData === "succeeded") {
                        logger_1.logger.info(`üí∞ –ü–ª–∞—Ç—ë–∂ ${payment.paymentId} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω. –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ Google Sheets...`);
                        yield (0, writePaymentToSheet_1.appendSuccessfulPaymentToSheet)(payment);
                        this.removePayment(payment.paymentId);
                        logger_1.logger.info(`‚úÖ –ü–ª–∞—Ç—ë–∂ ${payment.paymentId} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω –∏ —É–¥–∞–ª—ë–Ω.`);
                    }
                    else if (statusData === "canceled") {
                        logger_1.logger.info(`‚ùå –ü–ª–∞—Ç—ë–∂ ${payment.paymentId} –æ—Ç–º–µ–Ω—ë–Ω.`);
                        this.removePayment(payment.paymentId);
                    }
                    else if (statusData === "pending") {
                        logger_1.logger.info(`‚è≥ –ü–ª–∞—Ç—ë–∂ ${payment.paymentId} –≤—Å—ë –µ—â—ë –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ.`);
                    }
                    else {
                        logger_1.logger.error(`‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ ${payment.paymentId}: ${statusData}`);
                    }
                }
                catch (err) {
                    logger_1.logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞ ${payment.paymentId}: ${err}`);
                }
                // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º (1 —Å–µ–∫—É–Ω–¥–∞)
                yield new Promise((resolve) => setTimeout(resolve, 1000));
            }
            logger_1.logger.info("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞.");
        }));
        logger_1.logger.info("‚è≥ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π –∑–∞–ø—É—â–µ–Ω (–∏–Ω—Ç–µ—Ä–≤–∞–ª: 1 –º–∏–Ω).");
    }
    /**
     * –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ –≤ —Å–ø–∏—Å–æ–∫ –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –ë–î
     */
    addPayment(payment) {
        this.pendingPayments.set(payment.paymentId, payment);
        database_1.default.prepare(`
            INSERT INTO pending_payments 
                (productId, paymentId, productTitle, productDescription, amount, currency, status, createdAt, date) 
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
            `).run(payment.productId, payment.paymentId, payment.productTitle, payment.productDescription, payment.amount, payment.currency, payment.status, payment.createdAt.toISOString(), JSON.stringify(payment.date) // –°–æ—Ö—Ä–∞–Ω—è–µ–º date –∫–∞–∫ JSON
        );
        logger_1.logger.info(`‚úÖ –ü–ª–∞—Ç—ë–∂ ${payment.paymentId} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –ë–î.`);
    }
    /**
     * –£–¥–∞–ª—è–µ—Ç –ø–ª–∞—Ç–µ–∂ –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –∏ –∏–∑ –ë–î
     */
    removePayment(paymentId) {
        if (this.pendingPayments.has(paymentId)) {
            this.pendingPayments.delete(paymentId);
            database_1.default.prepare("DELETE FROM pending_payments WHERE paymentId = ?").run(paymentId);
            logger_1.logger.info(`‚úÖ –ü–ª–∞—Ç—ë–∂ ${paymentId} —É–¥–∞–ª—ë–Ω –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –∏ –ë–î.`);
        }
        else {
            logger_1.logger.warn(`‚ö†Ô∏è –ü–ª–∞—Ç—ë–∂ ${paymentId} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
        }
    }
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏
     */
    getPendingPayments() {
        return Array.from(this.pendingPayments.values());
    }
}
// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –µ–¥–∏–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
exports.pendingPaymentsManager = new PendingPaymentsManager();
