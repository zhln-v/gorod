import express, { Request, Response } from "express";
import axios from "axios";
import { v4 as uuidv4 } from "uuid";
import { logger } from "../utils/logger";
import { pendingPaymentsManager } from "../utils/PendingPaymentsManager";
import { config } from "../config";
import { getOriginalProduct } from "../utils/getOriginalProduct";

const router = express.Router();

router.post("/", async (req: Request, res: Response) => {
    try {
        logger.info("üöÄ –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞", req.body);

        const { productId, Receipt } = req.body;
        if (!productId) {
            logger.error("‚ùå –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç productId –≤ –∑–∞–ø—Ä–æ—Å–µ");
            res.status(400).json({
                status: "error",
                message: "–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π (productId).",
            });
        }

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ ID
        logger.info(
            `üîç –ó–∞–ø—Ä–æ—Å –∫ Tilda API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞ ${productId}`
        );
        const productData = await getOriginalProduct(productId);

        logger.info("üì¶ –î–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ–ª—É—á–µ–Ω—ã:", productData);

        const productInfo = productData?.uid
            ? productData
            : productData.products?.[0];
        if (!productInfo) {
            logger.error("‚ùå –û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!", productData);
            res.status(400).json({
                status: "error",
                message: "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!",
            });
        }

        // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—É–º–º—ã –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—å–∏
        logger.info("üî¢ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —Ç–æ–≤–∞—Ä–∞...");
        const characteristics = productInfo.characteristics || [];
        const priceStr = characteristics.find(
            (c: any) => c.title === "price"
        )?.value;
        const quantityStr = characteristics.find(
            (c: any) => c.title === "quantity"
        )?.value;

        const articleName =
            characteristics.find((c: any) => c.title === "dol_sol")?.value ||
            productInfo.title ||
            "–¢–æ–≤–∞—Ä";

        logger.info("‚úÖ –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ç–æ–≤–∞—Ä–∞:", {
            priceStr,
            quantityStr,
            articleName,
        });

        if (!priceStr || !quantityStr) {
            logger.error("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –≤ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞—Ö");
            res.status(400).json({
                status: "error",
                message:
                    "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –≤ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞—Ö –¥–ª—è –æ–ø–ª–∞—Ç—ã —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–º.",
            });
        }

        const unitPrice = parseFloat(priceStr);
        const quantity = parseInt(quantityStr, 10);
        if (isNaN(unitPrice) || isNaN(quantity)) {
            logger.error(
                "‚ùå –û—à–∏–±–∫–∞: –æ—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞—Ö.",
                { unitPrice, quantity }
            );
            res.status(400).json({
                status: "error",
                message: "–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞—Ö.",
            });
        }
        const totalValue = (unitPrice * quantity).toFixed(2);
        logger.info("üí∞ –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞:", totalValue);

        // –û—á–∏—Å—Ç–∫–∞ tru_code: —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ —Ç–æ—á–∫—É
        const truCodeRaw =
            characteristics.find((c: any) => c.title === "truCode")?.value ||
            "";
        let [beforeDot, afterDot = ""] = truCodeRaw.split(".");
        afterDot = afterDot.padEnd(20, "0").slice(0, 20);
        const truCode = `${beforeDot}.${afterDot}`;

        if (!/^\d+\.\d{20}$/.test(truCode)) {
            logger.error("‚ùå –û—à–∏–±–∫–∞: truCode –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞", {
                truCode,
            });
            res.status(400).json({
                status: "error",
                message: `truCode –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ X.XXXXXXXXXXXXXXXXXXXXXX (–ø–æ—Å–ª–µ —Ç–æ—á–∫–∏ —Ä–æ–≤–Ω–æ 20 —Å–∏–º–≤–æ–ª–æ–≤), –Ω–æ –ø–æ–ª—É—á–µ–Ω: ${truCode}`,
            });
        }

        logger.info("üõ† truCode –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤ YooKassa:", { truCode });

        // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã –∫–ª–∏–µ–Ω—Ç–∞
        const { parentName, childName, birthDate, snils, email, phone } =
            req.body;
        logger.info("üìú –î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞:", {
            parentName,
            email,
            phone,
            childName,
            birthDate,
            snils,
        });

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ –Ω–µ–ø—É—Å—Ç–æ—Ç—É
        if (
            !parentName ||
            !email ||
            !phone ||
            !childName ||
            !birthDate ||
            !snils
        ) {
            logger.error("‚ùå –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∫–ª–∏–µ–Ω—Ç–∞", {
                parentName,
                email,
                phone,
                childName,
                birthDate,
                snils,
            });
            res.status(400).json({
                status: "error",
                message:
                    "–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∫–ª–∏–µ–Ω—Ç–∞ (parentName, email, phone, childName, birthDate, snils) –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏.",
            });
        }

        let parsedReceipt: any;
        if (Receipt) {
            try {
                parsedReceipt = JSON.parse(Receipt);
                logger.info("üßæ Receipt —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—à–µ–Ω:", parsedReceipt);
            } catch (e) {
                logger.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å Receipt:", e);
            }
        }

        const idempotenceKey = uuidv4();

        // –§–æ—Ä–º–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ —Å—Ç–∞—Ç–µ–π –¥–ª—è —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–≥–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
        const articles = [
            {
                article_number: 1,
                tru_code: truCode,
                article_code: productInfo.uid.toString(),
                article_name: articleName,
                quantity: quantity,
                price: {
                    value: unitPrice.toFixed(2),
                    currency: "RUB",
                },
            },
        ];

        logger.info("üìú –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã articles –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞:", articles);

        // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ YooKassa
        const paymentData = {
            amount: {
                value: totalValue,
                currency: "RUB",
            },
            payment_method_data: {
                type: "electronic_certificate",
                articles: articles,
            },
            confirmation: {
                type: "redirect",
                return_url: `${config.BASE_URL}/success?productId=${productId}`,
            },
            capture: true,
            description: `–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: ${productInfo.title}`,
            metadata: {
                order_id: productInfo.uid.toString(),
            },
        };

        logger.info("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É –≤ YooKassa...");
        const responseYk = await axios.post(
            config.YOOKASSA_API_URL,
            paymentData,
            {
                auth: {
                    username: config.SHOP_ID,
                    password: config.API_KEY,
                },
                headers: {
                    "Content-Type": "application/json",
                    "Idempotence-Key": idempotenceKey,
                },
            }
        );

        const paymentUrl = responseYk.data.confirmation.confirmation_url;
        logger.info(`‚úÖ –ü–ª–∞—Ç—ë–∂ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω. –°—Å—ã–ª–∫–∞: ${paymentUrl}`);

        // –î–æ–±–∞–≤–ª—è–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –º–µ–Ω–µ–¥–∂–µ—Ä –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        pendingPaymentsManager.addPayment({
            productId,
            productTitle: productInfo.title || "",
            productDescription: productInfo.descr || "",
            paymentId: responseYk.data.id,
            amount: responseYk.data.amount.value,
            currency: responseYk.data.amount.currency,
            status: responseYk.data.status,
            createdAt: new Date(),
            date: {
                parent_name: parentName,
                email,
                phone,
                child_name: childName,
                birth_date: birthDate,
                snils,
            },
        });

        res.json({
            status: "success",
            redirect: paymentUrl,
        });
    } catch (error: any) {
        logger.error(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞:",
            error.response?.data || error.message
        );
        res.status(500).json({
            status: "error",
            message: error.response?.data || error.message,
        });
    }
});

export { router as createPayment };
