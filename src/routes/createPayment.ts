import express, { Request, Response } from "express";
import axios from "axios";
import { v4 as uuidv4 } from "uuid";
import { logger } from "../utils/logger";
import { pendingPaymentsManager } from "../utils/PendingPaymentsManager";
import { config } from "../config";
import { getOriginalProduct } from "../utils/getOriginalProduct";

const router = express.Router();

router.post("/", async (req: Request, res: Response) => {
    try {
        const {
            productId,
            Receipt,
            parentName,
            childName,
            birthDate,
            snils,
            email,
            phone,
        } = req.body;

        logger.info("üöÄ –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞", {
            productId,
            parentName,
            childName,
            birthDate,
            snils,
            email,
            phone,
        });

        if (!productId) {
            logger.error("‚ùå –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç productId");
            res.status(400).json({
                status: "error",
                message: "–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π (productId).",
            });
        }

        logger.info(
            `üîç –ó–∞–ø—Ä–æ—Å –∫ Tilda API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞ ${productId}`
        );

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ id
        const productData = await getOriginalProduct(productId);
        logger.info("üì¶ –î–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ–ª—É—á–µ–Ω—ã:", productData);

        const productInfo =
            productData && productData.uid
                ? productData
                : productData.products?.[0];

        if (!productInfo) {
            logger.error(`‚ùå –û—à–∏–±–∫–∞: –¢–æ–≤–∞—Ä —Å ID ${productId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            res.status(400).json({
                status: "error",
                message: "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!",
            });
        }

        // –ü–æ–ª—É—á–∞–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–Ω—É
        const originalPrice = parseFloat(productInfo.price);
        if (isNaN(originalPrice) || originalPrice <= 0) {
            logger.error(
                `‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ (${productInfo.price})`
            );
            res.status(400).json({
                status: "error",
                message: "–ù–µ–≤–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞.",
            });
        }

        // –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
        const title = productInfo.title || "–¢–æ–≤–∞—Ä";
        const fullDescription = title;

        logger.info("‚úÖ –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ç–æ–≤–∞—Ä–∞:", {
            title,
            description: productInfo.descr || "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è",
            price: originalPrice,
        });

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—É—é —Ü–µ–Ω—É
        const amountValue = originalPrice;

        let parsedReceipt: any;
        if (Receipt) {
            try {
                parsedReceipt = JSON.parse(Receipt);
                logger.info("‚úÖ Receipt —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω");
            } catch (e) {
                logger.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Receipt", { error: e });
            }
        }

        const idempotenceKey = uuidv4();

        // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ YooKassa
        const paymentData: any = {
            amount: {
                value: amountValue,
                currency: "RUB",
            },
            confirmation: {
                type: "redirect",
                return_url: `${config.REDIRECT_URL}`,
            },
            capture: true,
            description: fullDescription,
            metadata: {
                uniqueId: idempotenceKey,
                productId: productId,
            },
        };

        if (parsedReceipt && parsedReceipt.items && parsedReceipt.taxation) {
            const items = parsedReceipt.items.map((item: any) => ({
                description: item.name,
                quantity: item.quantity,
                amount: { value: parseFloat(item.price), currency: "RUB" },
                vat_code: 1,
            }));

            paymentData.receipt = {
                items,
                taxation: parsedReceipt.taxation,
            };
        }

        logger.info("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É –≤ YooKassa...", {
            paymentData,
        });

        // –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ YooKassa
        const responseYk = await axios.post(
            config.YOOKASSA_API_URL,
            paymentData,
            {
                auth: {
                    username: config.SHOP_ID,
                    password: config.API_KEY,
                },
                headers: {
                    "Content-Type": "application/json",
                    "Idempotence-Key": idempotenceKey,
                },
            }
        );

        const paymentUrl = responseYk.data.confirmation.confirmation_url;
        logger.info(
            `‚úÖ –ü–ª–∞—Ç—ë–∂ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω, —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É: ${paymentUrl}`
        );

        // –î–æ–±–∞–≤–ª—è–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –º–µ–Ω–µ–¥–∂–µ—Ä –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
        pendingPaymentsManager.addPayment({
            productId: productId,
            productTitle: title,
            productDescription: productInfo.descr || "",
            paymentId: responseYk.data.id,
            amount: responseYk.data.amount.value,
            currency: responseYk.data.amount.currency,
            status: responseYk.data.status,
            createdAt: new Date(),
            date: {
                parent_name: parentName,
                email: email,
                phone: phone,
                child_name: childName,
                birth_date: birthDate,
                snils: snils,
            },
        });

        logger.info(
            `‚úÖ –ü–ª–∞—Ç—ë–∂ ${responseYk.data.id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É`
        );

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç—É —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É –∏ —É—Å–ø–µ—à–Ω—ã–π —Å—Ç–∞—Ç—É—Å
        res.json({
            status: "success",
            redirect: paymentUrl,
        });
    } catch (error: any) {
        logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞:", {
            error: error.response?.data || error.message,
        });

        res.status(500).json({
            status: "error",
            message: error.response?.data || error.message,
        });
    }
});

export { router as createPayment };
